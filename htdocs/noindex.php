<?php
	echo '<hr><hr><br><h2>Модуль №20.1-2: Создание корзины. Добавление системы оплаты
</h2>' . "<br>";

	echo '<hr><hr><br><h3>Back - #20.1 - Оформление_страницы_покупки
	</h3><hr><hr>' . "<br>";
	/*Введение:
		В ходе урока создадим шаблон, функционал добавления товара в корзину и контроллер. 
		Контроллре будет называться "Basket".
		Создадим модель и назовем ее "BasketModel". 
		Для реализации функционала корзины нам понадоятся сессии для установки Id приобритаемых товаров.

		ОБЪЯВЛЕНИЕ СЕССИИ
		ВАЖНО! В случаи если в шаблонах будут выводится ошибки при отображении содержимого сессии, то в каждом шаблоне с ошибкой достаточно прописать вызов функции объявления сессии, до вывода содержимого шаблона:
		Пример:
			<?php session_start();?>
			<!DOCTYPE html>
		Над моделью объявляем сессию через функцию session_start();
		Создадим поле, хранящее название сесии по-дефолту - private $session_name = 'cart';
		Создадим методы проверки сессии на наличие, метод удаления сессии, метот вывода значени сессии, добавления товара в сессию, подсчета товаров в сессии. 
		Все с комментариями описано в модели "BasketModel.php". 

		РАБОТА С ШАБЛОНОМ 'product\index.php', ФОРМОЙ ПЕРЕДАЧИ СЕССИИ ЧЕРЕЗ КНОПКУ ПОКУПКИ
		В шаблоне 'product\index.php' имеется кнопка покупки товаров - сделаем ее функциональной. Для этого ее нужно обернуть в форму. 
		Пример:
			<form action="/basket" method="POST">
				<input type="hidden" name="input_name" value="<?=$data['id']?>">
				<button class="btn">Купить за <?=$data['price']?> рублей</button>
			</form>
		где, 
			action="/basket" - переброска на страницу и передача на нее данных формы. И в контролле "basket".
			<input type="hidden" name="input_name" value="<?=$data['id']?>"> - передаваемый параметр
		
		РАБОТА С КОНТРОЛЛЕРОМ - ПЕРЕДАЧА СОДЕРЖАНИЯ СЕССИИ В ШАБЛОН
		После передачи значения формы (id товара), можно будет выводить товар в шаблоне с корзиной. 
		Но сначала этот параметр нужно передать через контроллер в модель - создадим объект на основе класса модели. Передаем через метод модели Id товара в сессию. 
		При нажатии на дополнительный товар через кнопку - его Id будет добавляться через запятую. 
		НО если сессия не пуста, а переход в корзину был произашел не через кнопку, а через нажатие на корзину, то и сообщение о пустой корзине не отобразится, так как сассия пуста. 
		И Id товара не отобразится так как кнопка покупки товара не была нажата и передачи POST массива в контроллер не было.
		Пример:
			Не работает, так как сессия не пуста
			if (!$cart->isSetSession()) {
				$data['empty'] = 'Пустая корзина';}
		
			Не работает так как передачи POST через кнопку не происходит и значит вывода сессии нет. 
			if (isset($_POST['input_id'])) {
				$cart->addToCard($_POST['input_id']);
				$data['products'] = $cart->getSession();}

		Для исправления бага - просто перенесем вывод сессии в оператор else второго условия, а из первого условия вывод сесии убирается
		Пример:
			if (!$cart->isSetSession()) {
				$data['empty'] = 'Пустая корзина';
			}else{
				$data['products'] = $cart->getSession();}
			}
		
		РАБОТА С ШАБЛОНОМ "blocks\header.php" И ДОПОЛНЕНИЕ ФУНКЦИОНАЛА ВЫВОДА ТОВАРОВ В КОРЗИНЕ
			Так как для шаблона "blocks\header.php" не прописан конторллер, то пропишем в этом шаблоне модель с методом вывода числа товаровв сессии. 
			Пример:
				<?php	require_once 'app/models/BasketModel.php';
						$countItemsToBasket = new BasketModel();?>
						<button class="btn basket">Корзина <b>(<?php <?=$countItemsToBasket->countItems()?> ?>)</b></button>
		
			Число товаров, помещенных в корзину отображается. Теперь - теперь дополним функционал вывода товаров в корзине - сейчас выводится только Id товаров. 
			Для этого вы контроллере Basket создадим объект модели "Products" для дополнения шаблона данными из этой модели.
			Пример: 
				//вывод товаров в корзину, где параметром является $cart->getSession() - Id товаров, помещенных в сессию
				$products = $this->model('Products');
				$data['products'] = $products->getProductsCart($cart->getSession());

			И в модели Products создадим метд выводатоваров с Id из сессии. 
			Пример: 
				//вывод товаров, помещенных в корзину
				public function getProductsCart($items){
					$result = $this->_db->query("SELECT * FROM `products` WHERE `id` IN ($items)");
					return $result->fetchAll(PDO::FETCH_ASSOC);
				}
				где, 
				IN	- оператор, прнимающий одно из значений. Так как $items - массив, то принимаются все значения массива.

		РАБОТА С ШАБЛОНОМ КОРЗИНЫ
		Создадим дополнительную проверку в шаблоне на наличие сессии и если она не пуста - выводим товары в корзине. 
			Пример:
		<?php if(count($data['products']) == 0): ?>
			<!-- выод сообщения о пустой корзине -->
			<p><?=$data['empty']?></p>
		<?php else: ?>
			<!-- вывод товаров, добавленных в корзину -->
			<div class="products">
				<?php
				$sum = 0;
				for($i = 0; $i < count($data['products']); $i++): 
					$sum += $data['products'][$i]['price'];
				?>
					<div class="row">
						<img src="/public/img/<?=$data['products'][$i]['img']?>" alt="<?=$data['products'][$i]['title']?>">
						<h4><?=$data['products'][$i]['title']?></h4>
						<span><?=$data['products'][$i]['price']?> рублей</span>
					</div>
				<?php endfor; ?>
				<!-- итого -->
				<button class="btn">Итого: (<?=$sum?>) рублей</button>
			</div>
		<?php endif; ?>
		
		Вывод товаров имеет такой вид ($data['products'][$i]['img']), так как выводится массив в массиве, которыхй находится в элементе "products", который тоже является частью массива.
		Когда товары выводятся - настроим вывод обещй суммы покупки для всех товаров. 
			Пример:
				$sum  = 0; Объявим переменную, изначально равную значению 0;
				$sum += $data['products'][$i]['title'];
		
		Теперь когда данные товаров выводятся в корзине - напишем для их отображения стили "products.css". 
	*/

	echo '<hr><hr><br><h3>Back - #20.2 - Добавление системы оплаты WalletOne
	</h3><hr><hr>' . "<br>";
	/*Введение:
		В этом уроке курса мы можно добавить на сайт систему оплаты, но этого делать мы не будем, так как это требует регистрации ИП либо поиск другой системы оплаты для Физ. лиц. 
		Требования для добавления систнемы оплаты на сайт:
			1) Регистрация в системе оплаты. При регистрации должен указаться тип акаунта - "юридическое лицо".
			2) При регистрации нужно будет прикрепить документы, свидетельствующие о вас как о ИП и ЮЛ.
			3) После следует обратиться к документации API и поменять первоначальные поля. Такие как Id магозина, основной ключ, валюту оплаты, переменную...вмещающую в себе сумму к оплате, страницы с оповещением успешной или неуспешной оплаты на сайте. И т.д. 
			4) Вставляем форму из документации на страницу оплаты. И в этой форме  в кнопку, ведующую на сайт системы оплаты через API внесем сумму, нужную к оплате. Предварительно скрыв поля передаваемые через API.
			5) После нажатия на кнопку оплаты должна производиться переброска на сайт сисстемы оплаты с указанной суммой к оплате и всемы возможными споосбами опаты в конкретно выбранной стране. После оплаты сумма поступает в личный кабинет системы оплаты. Из нее уже можно выбрать счет/карту, куда можно вывести поступленные средства. 

	*/